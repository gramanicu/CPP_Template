#!/usr/bin/env bash
# Â© 2019 Grama Nicolae

sudo wget -N -q --no-check-certificate --content-disposition https://raw.githubusercontent.com/gramanicu/CPP_Template/master/c%2B%2Bproj -O /usr/local/bin/c++proj
sudo chmod +x /usr/local/bin/c++proj

if [ "$#" -eq 0 ]; then
    SNAME="${PWD##*/}.cpp"  # source name
    ENAME="${PWD##*/}"  # executable name
    ANAME="${PWD##*/}.zip"  # archive name
fi

if [ "$#" -eq 1 ]; then
    SNAME="${1%.*}.cpp"  # source name
    ENAME="${1%.*}"  # executable name
    ANAME="${PWD##*/}.zip"  # archive name
fi

if [ "$#" -eq 2 ]; then
    SNAME="${1%.*}.cpp"  # source name
    ENAME="${2%.*}"  # executable name
    ANAME="${1%.*}.zip"  # archive name
fi

if [ "$#" -ge 3 ]; then
    SNAME="${1%.*}.cpp"  # source name
    ENAME="${2%.*}"  # executable name
    ANAME="${3%.*}.zip"  # archive name
fi

echo $SNAME
echo $ENAME
echo $ANAME

cat > Makefile << EOF
# Copyright 2019 Grama Nicolae

.PHONY: gitignore clean memory beauty run
.SILENT: beauty clean memory gitignore

# Compilation variables
CC = g++
CFLAGS = -Wno-unused-parameter -Wall -Wextra -pedantic -g -O3 -std=c++14
EXE = $ENAME
SRC = \$(wildcard */*.cpp)
OBJ = \$(SRC:.cpp=.o)

# Compiles the program
build: \$(OBJ)
	\$(info Compiling code...)
	@\$(CC) -o \$(EXE) \$^ \$(CFLAGS) ||:
	\$(info Compilation successfull)
	-@rm -f *.o ||:
	@\$(MAKE) -s gitignore ||:

%.o: %.cpp
	\$(CC) -o \$@ -c \$< \$(CFLAGS) 

# Executes the binary
run: clean build
	./\$(EXE)

# Deletes the binary and object files
clean:
	rm -f \$(EXE) \$(OBJ) $ANAME
	echo "Deleted the binary and object files"

# Automatic coding style, in my personal style
beauty:
	clang-format -i -style=file */*.cpp
	clang-format -i -style=file */*.h

# Checks the memory for leaks
MFLAGS = --leak-check=full --show-leak-kinds=all --track-origins=yes
memory:clean build
	valgrind \$(MFLAGS) ./\$(EXE)

# Adds and updates gitignore rules
gitignore:
	@echo "\$(EXE)" > .gitignore ||:
	@echo "sources/*.o" >> .gitignore ||:
	@echo ".vscode*" >> .gitignore ||:	
	echo "Updated .gitignore"
	
# Creates an archive of the project
pack: clean
	zip -FSr $ANAME *

EOF


cat > .clang-format << EOF
---
Language:        Cpp
# BasedOnStyle:  Google
AccessModifierOffset: -1
AlignAfterOpenBracket: Align
AlignConsecutiveAssignments: false
AlignConsecutiveDeclarations: false
AlignEscapedNewlines: Left
AlignOperands:   true
AlignTrailingComments: true
AllowAllParametersOfDeclarationOnNextLine: true
AllowShortBlocksOnASingleLine: false
AllowShortCaseLabelsOnASingleLine: false
AllowShortFunctionsOnASingleLine: All
AllowShortIfStatementsOnASingleLine: true
AllowShortLoopsOnASingleLine: true
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: true
AlwaysBreakTemplateDeclarations: true
BinPackArguments: true
BinPackParameters: true
BraceWrapping:   
  AfterClass:      false
  AfterControlStatement: false
  AfterEnum:       false
  AfterFunction:   false
  AfterNamespace:  false
  AfterObjCDeclaration: false
  AfterStruct:     false
  AfterUnion:      false
  AfterExternBlock: false
  BeforeCatch:     false
  BeforeElse:      false
  IndentBraces:    false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true
BreakBeforeBinaryOperators: None
BreakBeforeBraces: Attach
BreakBeforeInheritanceComma: false
BreakBeforeTernaryOperators: true
BreakConstructorInitializersBeforeComma: false
BreakConstructorInitializers: BeforeColon
BreakAfterJavaFieldAnnotations: false
BreakStringLiterals: true
ColumnLimit:     80
CommentPragmas:  '^ IWYU pragma:'
CompactNamespaces: false
ConstructorInitializerAllOnOneLineOrOnePerLine: true
ConstructorInitializerIndentWidth: 4
ContinuationIndentWidth: 4
Cpp11BracedListStyle: true
DerivePointerAlignment: true
DisableFormat:   false
ExperimentalAutoDetectBinPacking: false
FixNamespaceComments: true
ForEachMacros:   
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
IncludeBlocks:   Preserve
IncludeCategories: 
  - Regex:           '^<ext/.*\.h>'
    Priority:        2
  - Regex:           '^<.*\.h>'
    Priority:        1
  - Regex:           '^<.*'
    Priority:        2
  - Regex:           '.*'
    Priority:        3
IncludeIsMainRegex: '([-_](test|unittest))?$'
IndentCaseLabels: true
IndentPPDirectives: None
IndentWidth:     4
IndentWrappedFunctionNames: false
JavaScriptQuotes: Leave
JavaScriptWrapImports: true
KeepEmptyLinesAtTheStartOfBlocks: false
MacroBlockBegin: ''
MacroBlockEnd:   ''
MaxEmptyLinesToKeep: 1
NamespaceIndentation: None
ObjCBlockIndentWidth: 2
ObjCSpaceAfterProperty: false
ObjCSpaceBeforeProtocolList: false
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 1
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakString: 1000
PenaltyExcessCharacter: 1000000
PenaltyReturnTypeOnItsOwnLine: 200
PointerAlignment: Left
RawStringFormats: 
  - Delimiter:       pb
    Language:        TextProto
    BasedOnStyle:    google
ReflowComments:  true
SortIncludes:    true
SortUsingDeclarations: true
SpaceAfterCStyleCast: false
SpaceAfterTemplateKeyword: true
SpaceBeforeAssignmentOperators: true
SpaceBeforeParens: ControlStatements
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 2
SpacesInAngles:  false
SpacesInContainerLiterals: true
SpacesInCStyleCastParentheses: false
SpacesInParentheses: false
SpacesInSquareBrackets: false
Standard:        Auto
TabWidth:        8
UseTab:          Never
...
EOF

if [ ! -d "./sources/" ]; then
  mkdir sources
fi
if [ ! -d "./headers/" ]; then
  mkdir headers
fi

if [ ! -f "./sources/${SNAME}" ]; then
cat > sources/${SNAME} << EOF
#include <iostream>

int main() {
    
    return 0;
}

EOF

fi

